/*
VMware Fusion REST API

vmrest 1.3.1

API version: 1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmrest

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NicIpStackAllNics - struct for NicIpStackAllNics
type NicIpStackAllNics struct {
	NicIpStack *NicIpStack
	ArrayOfNicIpStack *[]NicIpStack
}

// NicIpStackAsNicIpStackAllNics is a convenience function that returns NicIpStack wrapped in NicIpStackAllNics
func NicIpStackAsNicIpStackAllNics(v *NicIpStack) NicIpStackAllNics {
	return NicIpStackAllNics{
		NicIpStack: v,
	}
}

// []NicIpStackAsNicIpStackAllNics is a convenience function that returns []NicIpStack wrapped in NicIpStackAllNics
func ArrayOfNicIpStackAsNicIpStackAllNics(v *[]NicIpStack) NicIpStackAllNics {
	return NicIpStackAllNics{
		ArrayOfNicIpStack: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NicIpStackAllNics) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NicIpStack
	err = newStrictDecoder(data).Decode(&dst.NicIpStack)
	if err == nil {
		jsonNicIpStack, _ := json.Marshal(dst.NicIpStack)
		if string(jsonNicIpStack) == "{}" { // empty struct
			dst.NicIpStack = nil
		} else {
			if err = validator.Validate(dst.NicIpStack); err != nil {
				dst.NicIpStack = nil
			} else {
				match++
			}
		}
	} else {
		dst.NicIpStack = nil
	}

	// try to unmarshal data into ArrayOfNicIpStack
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNicIpStack)
	if err == nil {
		jsonArrayOfNicIpStack, _ := json.Marshal(dst.ArrayOfNicIpStack)
		if string(jsonArrayOfNicIpStack) == "{}" { // empty struct
			dst.ArrayOfNicIpStack = nil
		} else {
			if err = validator.Validate(dst.ArrayOfNicIpStack); err != nil {
				dst.ArrayOfNicIpStack = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfNicIpStack = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NicIpStack = nil
		dst.ArrayOfNicIpStack = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NicIpStackAllNics)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NicIpStackAllNics)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NicIpStackAllNics) MarshalJSON() ([]byte, error) {
	if src.NicIpStack != nil {
		return json.Marshal(&src.NicIpStack)
	}

	if src.ArrayOfNicIpStack != nil {
		return json.Marshal(&src.ArrayOfNicIpStack)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NicIpStackAllNics) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NicIpStack != nil {
		return obj.NicIpStack
	}

	if obj.ArrayOfNicIpStack != nil {
		return obj.ArrayOfNicIpStack
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj NicIpStackAllNics) GetActualInstanceValue() (interface{}) {
	if obj.NicIpStack != nil {
		return *obj.NicIpStack
	}

	if obj.ArrayOfNicIpStack != nil {
		return *obj.ArrayOfNicIpStack
	}

	// all schemas are nil
	return nil
}

type NullableNicIpStackAllNics struct {
	value *NicIpStackAllNics
	isSet bool
}

func (v NullableNicIpStackAllNics) Get() *NicIpStackAllNics {
	return v.value
}

func (v *NullableNicIpStackAllNics) Set(val *NicIpStackAllNics) {
	v.value = val
	v.isSet = true
}

func (v NullableNicIpStackAllNics) IsSet() bool {
	return v.isSet
}

func (v *NullableNicIpStackAllNics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNicIpStackAllNics(val *NicIpStackAllNics) *NullableNicIpStackAllNics {
	return &NullableNicIpStackAllNics{value: val, isSet: true}
}

func (v NullableNicIpStackAllNics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNicIpStackAllNics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


