/*
VMware Fusion REST API

Testing VMNetworkAdaptersManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vmrest

import (
	"context"
	"testing"

	vmrest "github.com/kodal/vmrest-go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_vmrest_VMNetworkAdaptersManagementAPIService(t *testing.T) {

	configuration := vmrest.NewConfiguration()
	configuration.Host = "localhost:8697"
	configuration.Scheme = "http"
	apiClient := vmrest.NewAPIClient(configuration)
	ctx := context.WithValue(context.Background(), vmrest.ContextBasicAuth, vmrest.BasicAuth{
		UserName: "admin",
		Password: "Admin123.",
	})

	t.Run("Test VMNetworkAdaptersManagementAPIService CreateNICDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.CreateNICDevice(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMNetworkAdaptersManagementAPIService DeleteNICDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.DeleteNICDevice(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMNetworkAdaptersManagementAPIService GetAllNICDevices", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.GetAllNICDevices(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMNetworkAdaptersManagementAPIService GetIPAddress", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		var id string

		id = "26NLVMEFEURFJKRACQ0JEN6B4B1UIN65"

		resp, httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.GetIPAddress(ctx, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMNetworkAdaptersManagementAPIService GetNicInfo", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		var id string

		id = "C9JNBDLAJ69P4DVDB28PUK6C2PMFTMBP"

		resp, httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.GetNicInfo(ctx, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMNetworkAdaptersManagementAPIService UpdateNICDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var index string

		resp, httpRes, err := apiClient.VMNetworkAdaptersManagementAPI.UpdateNICDevice(context.Background(), id, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
